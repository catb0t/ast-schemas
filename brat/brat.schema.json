{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "brat-base",
  "title": "Brat syntax description, by Cat Stevens",
  "description": "describing the current syntax of the Brat language reference implementation https://github.com/presidentbeef/brat",

  "definitions": {

    "separator": {
      "$comment": "Whitespace; either a space (value: 0), linebreak (1) or tab (2) character",

      "type": "object",

      "required": [ "id", "value" ],

      "additionalProperties": false,

      "properties": {
        "id": { "const": "separator" },
        "value": { "enum": [0, 1, 2], "type": "number" }
      }
    },

    "comment": {
      "$comment": "a node which is intended for humans to read, not part of the language semantics. technically this contains an extension not present in the reference implementation (comments are simply ignored in the RI and are not AST elements to be handled), but is backwards compatible with the reference implementation, so it's cool to have it anyway. also, it makes it a lot easier to disable Brat nodes in the JSON representation, by just changing a node's id to 'comment'.",

      "definitions": {
        "single": {
          "$comment": "either a simple string or an ordered grouping of values which convey information to a reader/user; the values may be strings, which will be literal text, or any other JSON value or object, which serve to enrich the comment",
          "properties": {
            "note": { "type": ["array", "string"] },
            "multi": { "const": false }
          }
        },
        "multi": {
          "$comment": "each immediate child array is one line of a multi-line comment; the lines themselves are just like single-line comments",
          "required": ["multi"],
          "properties": {
            "note": {
              "type": "array",
              "items": { "$ref": "#/definitions/comment/definitions/single" }
            },
            "multi": { "const": true }
          }
        }
      },

      "type": "object",

      "required": ["id"],
      "additionalProperties": false,

      "properties": {
        "id": { "const": "comment" },
        "note": { "type": ["array", "string"] },
        "multi": { "type": "boolean", "default": false },
        "extends_to_eof": { "type": "boolean", "default": false }
      },

      "oneOf": [
        { "$ref": "#/definitions/comment/definitions/single" },
        { "$ref": "#/definitions/comment/definitions/multi" }
      ]
    },

    "literal": {
      "$comment": "Brat has 7 basic literal constructions: number, string, symbol, regex, array, hash, and function, the last of which is declared separately, in `function`. array and hash are compound types containing other nodes, represented by JSON arrays and objects, respectively. number is represented by a primitive JSON number. a symbol is a string written :like_this, only containing contiguous word characters; a string is any non-symbol string. finally, a regex is either a simple pattern string, or an object containing the pattern string and string of flags. NOTE: format_type, quote_type etc are defined in 2 places and must be updated in 2 places, at the top level and inside as well.",

      "definitions": {
        "bare": {
          "$comment": "VIRTUAL: NOTE: this node does not appear outside of compound literals. 'bare' is not a kind of general non-object AST literal, it appears only within DEEP LITERALS! these are the only Brat literals with direct representations in JSON. Brat booleans and null are methods on the global `object` object and are *unrelated* to JSON booleans and null.",
          "type": ["number", "string", "array", "object"]
        },
        "number": {
          "$comment": "an integer or floating point JSON number. Brat does not currently specify or implement rationals or complex / other multi-dimensional types as primitives. possible extension: extended number type with kind 'extended_number' stored as a string and not limited to JSON number formats / storage. NOTA BENA that this has 'not: value/type: string' because there is no other 'type' indicator in the 'literal/definitions/string' schema, or this one, or in 'symbol' for that matter.",
          "not": {
            "properties": {
              "value": { "type": "string" }
            }
          },
          "additionalProperties": false,
          "required": ["id", "value"],
          "properties": {
            "id": { "const": "literal" },
            "value": { "type": "number" },
            "format_type": { "type": "string", "pattern": "[lrim]" },
            "kind": { "const": false }
          }
        },
        "string": {
          "$comment": "a string of arbitrary characters which cannot be written as a symbol. quote_type tells the (de)parser what kind of quotes were originally used for this string, to simplify nested quote deparsing to valid code",
          "additionalProperties": false,
          "required": ["id"],
          "properties": {
            "id": { "const": "literal" },
            "value": { "type": "string", "pattern": "\\W" },
            "quote_type": { "type": "string", "pattern": "[sd]" },
            "kind": { "const": false }
          }
        },
        "symbol": {
          "$comment": "the subset of strings that contain only contiguous word characters. it is a syntax error to not specify a symbol-like string as a symbol.",
          "additionalProperties": false,
          "required": ["id", "value", "kind"],
          "properties": {
            "id": { "const": "literal" },
            "value": { "type": "string", "pattern": "^\\w+$" },
            "kind": { "const": "symbol" }
          }
        },
        "regex": {
          "$comment": "a regular expression, with or without flags",
          "definitions": {
            "simple": {
              "type": "string", "format": "regex"
            },
            "flagged": {
              "definitions": {
                "string": { "type": "string", "pattern": "^[a-zA-Z]+$" },
                "array": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/literal/definitions/regex/definitions/flagged/definitions/string" }
                }
              },
              "type": "object",
              "additionalProperties": false,
              "required": ["pattern", "flags"],
              "properties": {
                "pattern": { "$ref": "#/definitions/literal/definitions/regex/definitions/simple" },
                "flags": {
                  "oneOf": [
                    { "$ref": "#/definitions/literal/definitions/regex/definitions/flagged/definitions/string" },
                    { "$ref": "#/definitions/literal/definitions/regex/definitions/flagged/definitions/array" }
                  ]
                }
              }
            }
          },
          "not": {
            "properties": {
              "kind": { "enum": [false, "symbol"] },
              "value": { "type": "array" }
            }
          },

          "additionalProperties": false,
          "required": ["id", "kind"],

          "properties": {
            "id": { "const": "literal" },
            "value": {
              "type": ["string", "object"],
              "oneOf": [
                { "$ref": "#/definitions/literal/definitions/regex/definitions/simple" },
                { "$ref": "#/definitions/literal/definitions/regex/definitions/flagged" }
              ]
            },
            "kind": { "const": "regex" }
          }
        },
        "compound": {
          "$comment": "the 2 kinds of nested / structure literals: array and hash. these can be deep literals if they only contain other literal values, but by default allow arbitrary AST node children. assoc and exprkey are non-LuaBrat extensions.",
          "definitions": {
            "deep": {
              "definitions": {
                "hash": {
                  "additionalProperties": false,
                  "required": ["id", "value", "kind"],
                  "properties": {
                    "id": { "const": "literal" },
                    "kind": { "const": "deep_hash" },
                    "value": {
                      "type": "object",
                      "additionalProperties": { "$ref": "#/definitions/literal/definitions/bare" }
                    }
                  }
                },
                "array": {
                  "additionalProperties": false,
                  "required": ["id", "value", "kind"],
                  "properties": {
                    "id": { "const": "literal" },
                    "kind": { "const": "deep_array" },
                    "value": {
                      "type": "array",
                      "items": { "$ref": "#/definitions/literal/definitions/bare" }
                    }
                  }
                },
                "assoc": {
                  "additionalProperties": false,
                  "required": ["id", "value", "kind"],
                  "properties": {
                    "id": { "const": "literal" },
                    "kind": { "const": "deep_assoc" },
                    "value": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "maxItems": 2,
                        "items": { "$ref": "#/definitions/literal/definitions/bare" }
                      }
                    }
                  }
                },
                "exprkey": {
                  "additionalProperties": false,
                  "required": ["id", "value", "kind"],
                  "properties": {
                    "id": { "const": "literal" },
                    "kind": { "const": "deep_exprkey" },
                    "value": {
                      "type": "object",
                      "additionalProperties": {
                        "additionalProperties": false,
                        "required": ["id", "key", "value"],
                        "properties": {
                          "id": { "const": "literal_deep_exprkey" },
                          "key": { "$ref": "#/definitions/literal/definitions/bare" },
                          "value": { "$ref": "#/definitions/literal/definitions/bare" }
                        }
                      }
                    }
                  }
                }
              },
              "oneOf": [
                { "$ref": "#/definitions/literal/definitions/compound/definitions/deep/definitions/hash" },
                { "$ref": "#/definitions/literal/definitions/compound/definitions/deep/definitions/array" },
                { "$ref": "#/definitions/literal/definitions/compound/definitions/deep/definitions/assoc" },
                { "$ref": "#/definitions/literal/definitions/compound/definitions/deep/definitions/exprkey" }
              ]
            },
            "basic": {
              "$comment": "note that in LuaBrat, functions can appear as keys/values in arrays/hashes. this obviously doesn't fit into a bare JSON type.",
              "definitions": {
                "hash": {
                  "additionalProperties": false,
                  "required": ["id", "value", "kind"],
                  "properties": {
                    "id": { "const": "literal" },
                    "kind": { "const": "hash" },
                    "value": {
                      "type": "array",
                      "additionalProperties": { "$ref": "#/definitions/node" }
                    }
                  }
                },
                "array": {
                  "additionalProperties": false,
                  "required": ["id", "value"],
                  "properties": {
                    "id": { "const": "literal" },
                    "kind": { "const": false },
                    "value": {
                      "type": "array",
                      "items": { "$ref": "#/definitions/node" }
                    }
                  }
                },
                "assoc": {
                  "additionalProperties": false,
                  "required": ["id", "value", "kind"],
                  "properties": {
                    "id": { "const": "literal" },
                    "kind": { "const": "assoc" },
                    "value": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          { "type": "array",
                            "minItems": 2,
                            "maxItems": 2,
                            "items": { "$ref": "#/definitions/node" }
                          },
                          { "$ref": "#/definitions/node" }
                        ]
                      }
                    }
                  }
                },
                "exprkey": {
                  "additionalProperties": false,
                  "required": ["id", "value", "kind"],
                  "properties": {
                    "id": { "const": "literal" },
                    "kind": { "const": "exprkey" },
                    "value": {
                      "type": "object",
                      "additionalProperties": {
                        "additionalProperties": false,
                        "required": ["id", "key", "value"],
                        "properties": {
                          "id": { "const": "literal_exprkey" },
                          "key": { "$ref": "#/definitions/expression" },
                          "value": { "$ref": "#/definitions/expression" }
                        }
                      }
                    }
                  }
                }
              },
              "oneOf": [
                { "$ref": "#/definitions/literal/definitions/compound/definitions/basic/definitions/hash" },
                { "$ref": "#/definitions/literal/definitions/compound/definitions/basic/definitions/array" },
                { "$ref": "#/definitions/literal/definitions/compound/definitions/basic/definitions/assoc" },
                { "$ref": "#/definitions/literal/definitions/compound/definitions/basic/definitions/exprkey" }
              ]
            }
          },
          "additionalProperties": false,
          "required": ["id", "value"],

          "properties": {
            "id": { "const": "literal" },
            "kind": { "enum": [
              false,
              "deep_array",
              "hash", "deep_hash",
              "exprkey", "deep_exprkey",
              "assoc", "deep_assoc"
            ] },
            "value": { "type": ["array", "object"] }
          },
          "oneOf": [
            { "$ref": "#/definitions/literal/definitions/compound/definitions/deep" },
            { "$ref": "#/definitions/literal/definitions/compound/definitions/basic" }
          ]
        }
      },

      "additionalProperties": false,
      "required": ["id"],

      "properties": {
        "id": { "const": "literal" },
        "value": { "type": [ "number", "string", "array", "object" ] },
        "format_type": { "type": "string", "pattern": "[lrim]" },
        "quote_type": { "type": "string", "pattern": "[sd]" },
        "kind": {
          "type": ["boolean", "string"],
          "default": false,
          "enum": [
            false,
            "symbol",
            "regex",
            "deep_array",
            "hash", "deep_hash",
            "exprkey", "deep_exprkey",
            "assoc", "deep_assoc"
          ]
        }
      },

      "oneOf": [
        { "$ref": "#/definitions/literal/definitions/number" },
        { "$ref": "#/definitions/literal/definitions/symbol" },
        { "$ref": "#/definitions/literal/definitions/string" },
        { "$ref": "#/definitions/literal/definitions/regex" },
        { "$ref": "#/definitions/literal/definitions/compound" }
      ]
    },

    "var_by_name": {
      "$comment": "a bare variable name; mainline Brat (LuaBrat) does not have the ability to use arbitrary expressions to compute bare names (that's what hashes and schema extensions are for)",

      "definitions": {
        "any_name": {
          "$comment": "perhaps this will be moved into a separate declaration if it is useful elsewhere than `member_access`",
          "type": "string", "pattern": "^[a-zA-Z0-9_!?\\-*+^&@~/\\><$%]+$"
        },
        "user_name": { "type": "string", "pattern": "^[a-zA-Z][a-zA-Z0-9_!?\\-*+^&@~/\\><$%]*$" },
        "var_or_bare_name": {
          "oneOf": [
            { "$ref": "#/definitions/var_by_name" },
            { "$ref": "#/definitions/var_by_name/definitions/user_name" }
          ]
        }
      },

      "type": "object",
      "required": ["id", "value"],
      "additionalProperties": false,
      "properties": {
        "id": { "const": "var_by_name" },
        "value": { "$ref": "#/definitions/var_by_name/definitions/user_name" }
      }
    },

    "member_access": {
      "$comment": "an expression of the form `a.b`, `<op>a`, `a<op>`, or `a <op> b` (the last 3 of which are equivalent to an `application` where `b.op` is the function to apply), where `a` is any object target (including another member_access), and `b` is a literal bare member name. this is also called a method call or method invocation. `({ object }()).true` works in LuaBrat with the enclosing parens. in LuaBrat, the member name cannot be the result of an arbitrary computed value (it must be a parser literal), and the target cannot be a function. those two features may have future support as an extension.",

      "type": "object",
      "required": ["id"],
      "additionalProperties": false,
      "properties": {
        "id": { "const": "member_access" },
        "target": { "$ref": "#/definitions/object_expression" },
        "member": {
          "$comment": "pre-defined members of builtins that don't start with a letter, may be accessed/assigned to (such as `number.* = 1`) but non-pre-defined ones may not be (as in `number.*newprop = 1`).",
          "oneOf": [
            { "$ref": "#/definitions/var_by_name" },
            { "$ref": "#/definitions/var_by_name/definitions/any_name" }
          ]
        }
      }
    },

    "assignment_target": {
      "$comment": "VIRTUAL: literally, what objects may appear on the LHS of an assignment operator (`=`). AFAIK this is only 1. variables, 2. the result of any member access and 3. any indexing operation; the impression I get from the spec is that *not* any value can be assigned to; `1 = 2` and `[1] = 2` do not parse in the reference impl. but `[1][0] = 2` works as expected.",

      "oneOf": [
        { "$ref": "#/definitions/var_by_name" },
        { "$ref": "#/definitions/index" },
        { "$ref": "#/definitions/member_access" }
      ]
    },

    "basic_object": {
      "$comment": "VIRTUAL: any basic object that isn't a comment or a function. specifically, it's either a literal, a simple variable name 'a', or a member access on a variable, like 'a.true?'. in the Lua reference implementation, a function is *not* just an object that implements a 'call' method or something, they are completely distinct. making functions objects is out of scope for this schema, but is a good idea for a Brat extension. not to be confused with the normal JSON 'object', or the type named 'object' known to JSON schema",

      "oneOf": [
        { "$ref": "#/definitions/literal" },
        { "$ref": "#/definitions/assignment_target" }
      ]
    },

    "function": {
      "$comment": "the literal expression which creates a callable value. a function is an array of nodes, just like the top-level program schema, except the function has different scoping rules. a function is not a callable object.",

      "type": "object",
      "required": ["id"],
      "additionalProperties": false,

      "properties": {
        "id": { "const": "function" },
        "does": { "$ref": "#" },
        "args": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "required": {
              "$comment": "positional required argument list when calling the function. these names become in scope in the `does` node-array, and get the values with which the function was invoked. for now, they can either be var_by_name objects or bare string names.",
              "type": "array",
              "items": { "oneOf": [
                  { "$ref": "#/definitions/var_by_name/definitions/var_or_bare_name" },
                  { "$ref": "#/definitions/comment" }
              ] }
            },
            "default": {
              "$comment": "ordered associative array of names of default parameter names with their default values, which, as far as i'm concerned, can be any expression. allowing any node would allow comment nodes as default values, which would be a cool extension, but is not actually in the reference implementation",
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "oneOf": [
                    { "$ref": "#/definitions/var_by_name/definitions/var_or_bare_name" },
                    { "$ref": "#/definitions/expression" },
                    { "$ref": "#/definitions/comment" }
                  ]
                }
              }
            },
            "extra": {
              "$comment": "the name of the *variable_length_args argument which collects all trailing ('extra') function arguments after all required and default argument positions, into an array. calling this part 'var args' or 'array', 'slurpy' etc might get confusing",
              "$ref": "#/definitions/var_by_name"
            }
          }
        }
      }
    },

    "value_of": {
      "$comment": "the 'don't do that' builtin prefix operator, usually spelled `->`, also referred to as the 'value of' operator.",

      "additionalProperties": false,
      "required": ["id", "target"],
      "properties": {
        "id": { "const": "value_of" },
        "target": { "$ref": "#/definitions/expression" }
      }
    },

    "assignment": {
      "$comment": "the assignment builtin operator. the LHS has to be something that can be assigned to, and the RHS can be any value, including another assignment. target and source used to be called lhs and rhs, respectively, as in the = operator, but i hoped target/source is more consistent (see member_access) and self-explanatory",

      "type": "object",
      "additionalProperties": false,
      "required": ["id", "target", "source"],
      "properties": {
        "id": { "const": "assignment" },
        "target": { "$ref": "#/definitions/assignment_target" },
        "source": { "$ref": "#/definitions/expression" }
      }
    },

    "application": {
      "$comment": "any expression of the form a b c d: x, a(b, c, d: x) or anything in-between, where a is something to invoke with the arguments, and d will be a key in a hash of 'keyword'-like arguments that will be given as the last formal parameter. note that a.b is a `member_access`, but a.b(c) is an `application` of the `member_access` `a.b` to the `positional_args` c.",
      "type": "object",
      "required": ["id", "target"],
      "additionalProperties": false,
      "properties": {
        "id": { "const": "application" },
        "target": { "$ref": "#/definitions/expression" },
        "positional_args": {
          "type": "array",
          "items": { "$ref": "#/definitions/expression" },
          "default": []
        },
        "hash_args": {
          "type": "object",
          "additionalProperties": { "$ref": "#/definitions/expression" }
        }
      }
    },

    "index": {
      "$comment": "index access on an array or hash value, like `x[y]` or `[1][0]` or `[a: 1][:a]` or `[...][a, b, c]`. `x[]` as an empty index / slice is a future extension.",
      "type": "object",
      "additionalProperties": false,
      "required": ["id", "target", "indices"],
      "properties": {
        "id": { "const": "index" },
        "target": { "$ref": "#/definitions/expression" },
        "indices": {
          "type": "array",
          "minItems": 1,
          "items": { "$ref": "#/definitions/node" }
        }
      }
    },

    "object_expression": {
      "$comment": "VIRTUAL: any expression that could yield an object, this is essentially all previous declarations except function and value_of which are included in expression because they might not produce an object.",

      "oneOf": [
        { "$ref": "#/definitions/basic_object" },
        { "$ref": "#/definitions/application" },
        { "$ref": "#/definitions/assignment" },
        { "$ref": "#/definitions/index" }
      ]
    },

    "expression": {
      "$comment": "VIRTUAL: any expression that produces a value, including non-objects like functions.",

      "not": { "$ref": "#/definitions/comment" },
      "oneOf": [
        { "$ref": "#/definitions/function" },
        { "$ref": "#/definitions/value_of" },
        { "$ref": "#/definitions/object_expression" }
      ]
    },

    "comma_operator": {
      "$comment": "the comma operator. usually not necessary, as 1 2 is the same as 1, 2, except that a b is different from a, b, and a b c d is read as a(b(c(d))) whereas a b, c, d is read as a(b, c, d)",

      "type": "object",
      "additionalProperties": false,
      "required": ["id"],
      "properties": {
        "id": { "const": "comma_operator"},
        "expressions": {
          "type": "array",
          "items": {
            "oneOf": [
              { "$ref": "#/definitions/separator"},
              { "$ref": "#/definitions/comment"},
              { "$ref": "#/definitions/expression" }
            ]
          }
        }
      }
    },

    "node": {
      "$comment": "VIRTUAL: generic base AST object group",
      "oneOf": [
        { "$ref": "#/definitions/separator" },
        { "$ref": "#/definitions/comment" },
        { "$ref": "#/definitions/expression" },
        { "$ref": "#/definitions/comma_operator" }
      ]
    },

    "node_group": {
      "$comment": "EXTENSION: a parenthesised group of nodes, like (1 2 3) (1,, 2, 3) or (1 #comment \n).",

      "type": "array",
      "items": { "$ref": "#/definitions/node" }
    }
  },

  "type": "array",
  "items": { "$ref": "#/definitions/node" },
  "default": []
}
