{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "brat-base",
  "title": "Brat syntax description, by Cat Stevens",
  "description": "describing the current syntax of the Brat language reference implementation https://github.com/presidentbeef/brat",

  "definitions": {
    "comment": {
      "$comment": "a node which is intended for humans to read, not part of the language semantics. technically this contains an extension not present in the reference implementation (comments are simply ignored in the RI and are not AST elements to be ), but is backwards compatible with the reference implementation, so it's cool to have it anyway. also, it makes it a lot easier to disable Brat nodes in the JSON representation, by just adding '_comment': true.",

      "definitions": {
        "single": {
          "$comment": "either a simple string or an ordered grouping of values which convey information to a reader/user; the values may be strings, which will be literal text, or any other JSON value or object, which serve to enrich the comment",
          "properties": {
            "_note": { "type": ["array", "string"] },
            "_multi": { "const": false }
          }
        },
        "multi": {
          "$comment": "each immediate child array is one line of a multi-line comment; the lines themselves are just like single-line comments",
          "required": ["_multi"],
          "properties": {
            "_note": {
              "type": "array",
              "items": {
                "items": { "$ref": "#/definitions/comment/definitions/single" }
              }
            },
            "_multi": { "const": true }
          }
        }
      },

      "type": "object",

      "required": ["_comment"],

      "properties": {
        "_comment": { "const": true },
        "_note": { "type": ["array", "string"] },
        "_multi": { "type": "boolean", "default": false },
        "_extends_to_eof": { "type": "boolean", "default": false }
      },

      "oneOf": [
        { "$ref": "#/definitions/comment/definitions/single" },
        { "$ref": "#/definitions/comment/definitions/multi" }
      ]
    },

    "literal": {
      "$comment": "Brat has 7 basic literal constructions: number, string, symbol, regex, array, hash, and function, the last of which is declared in `function`. array and hash are compound types containing other nodes, represented by JSON arrays and objects, respectively. number is represented by a primitive JSON number. a symbol is a string written :like_this, only containing contiguous word characters; a string is any non-symbol string. finally, a regex is either a simple pattern string, or an object containing the pattern string and string of flags.",

      "definitions": {
        "bare": {
          "$comment": "these are the only Brat literals with direct representations in JSON. Brat booleans and null are methods on the global `object` object and are unrelated to JSON booleans and null.",
          "type": ["number", "string", "array", "object"]
        },
        "number": {
          "$comment": "an integer or floating point JSON number. Brat does not currently specify or implement rationals or complex / other multi-dimensional types as primitives.",
          "not": {
            "properties": {
              "_value": { "type": "string" }
            }
          },
          "properties": {
            "_literal": { "const": true },
            "_value": { "type": "number" },
            "_kind": { "const": false }
          }
        },
        "string": {
          "$comment": "a string of arbitrary characters which cannot be written as a symbol",
          "properties": {
            "_value": { "type": "string", "pattern": "\\W" },
            "_kind": { "const": false }
          }
        },
        "symbol": {
          "$comment": "the subset of strings that contain only contiguous word characters. it is a syntax error to not specify a symbol-like string as a symbol.",
          "additionalProperties": false,
          "required": ["_literal", "_value", "_kind"],
          "properties": {
            "_literal": { "const": true },
            "_value": { "type": "string", "pattern": "^\\w+$" },
            "_kind": { "const": "_symbol" }
          }
        },
        "regex": {
          "$comment": "a regular expression, with or without flags",
          "definitions": {
            "simple": {
              "type": "string", "format": "regex"
            },
            "flagged": {
              "definitions": {
                "string": { "type": "string", "pattern": "^[a-zA-Z]+$" },
                "array": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/literal/definitions/regex/definitions/flagged/definitions/string" }
                }
              },
              "type": "object",
              "additionalProperties": false,
              "required": ["_pattern", "_flags"],
              "properties": {
                "_pattern": { "$ref": "#/definitions/literal/definitions/regex/definitions/simple" },
                "_flags": {
                  "oneOf": [
                    { "$ref": "#/definitions/literal/definitions/regex/definitions/flagged/definitions/string" },
                    { "$ref": "#/definitions/literal/definitions/regex/definitions/flagged/definitions/array" }
                  ]
                }
              }
            }
          },
          "not": {
            "properties": {
              "_kind": { "enum": [false, "_symbol"] },
              "_value": { "type": "array" }
            }
          },

          "additionalProperties": false,
          "required": ["_literal", "_value", "_kind"],

          "properties": {
            "_literal": { "const": true },
            "_value": {
              "type": ["string", "object"],
              "oneOf": [
                { "$ref": "#/definitions/literal/definitions/regex/definitions/simple" },
                { "$ref": "#/definitions/literal/definitions/regex/definitions/flagged" }
              ]
            },
            "_kind": { "const": "_regex" }
          }
        },
        "compound": {
          "$comment": "the 2 kinds of nested / structure literals: array and hash. these can be deep literals if they only contain other literal values, but by default allow arbitrary AST node children",
          "definitions": {
            "deep": {
              "definitions": {
                "hash": {
                  "additionalProperties": false,
                  "required": ["_literal", "_value", "_kind"],
                  "properties": {
                    "_literal": { "const": true },
                    "_kind": { "const": "_deep_hash" },
                    "_value": {
                      "type": "object",
                      "additionalProperties": { "$ref": "#/definitions/literal/definitions/bare" }
                    }
                  }
                },
                "array": {
                  "additionalProperties": false,
                  "required": ["_literal", "_value", "_kind"],
                  "properties": {
                    "_literal": { "const": true },
                    "_kind": { "const": "_deep_array" },
                    "_value": {
                      "type": "array",
                      "items": { "$ref": "#/definitions/literal/definitions/bare" }
                    }
                  }
                },
                "assoc": {
                  "additionalProperties": false,
                  "required": ["_literal", "_value", "_kind"],
                  "properties": {
                    "_literal": { "const": true },
                    "_kind": { "const": "_deep_assoc" },
                    "_value": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "maxItems": 2,
                        "items": { "$ref": "#/definitions/literal/definitions/bare" }
                      }
                    }
                  }
                },
                "exprkey": {
                  "additionalProperties": false,
                  "required": ["_literal", "_value", "_kind"],
                  "properties": {
                    "_literal": { "const": true },
                    "_kind": { "const": "_deep_exprkey" },
                    "_value": {
                      "type": "object",
                      "additionalProperties": {
                        "additionalProperties": false,
                        "required": ["_deep_exprkey", "_key", "_value"],
                        "properties": {
                          "_deep_exprkey": { "const": true },
                          "_key": { "$ref": "#/definitions/literal/definitions/bare" },
                          "_value": { "$ref": "#/definitions/literal/definitions/bare" }
                        }
                      }
                    }
                  }
                }
              },
              "oneOf": [
                { "$ref": "#/definitions/literal/definitions/compound/definitions/deep/definitions/hash" },
                { "$ref": "#/definitions/literal/definitions/compound/definitions/deep/definitions/array" },
                { "$ref": "#/definitions/literal/definitions/compound/definitions/deep/definitions/assoc" },
                { "$ref": "#/definitions/literal/definitions/compound/definitions/deep/definitions/exprkey" }
              ]
            },
            "basic": {
              "definitions": {
                "hash": {
                  "additionalProperties": false,
                  "required": ["_literal", "_value", "_kind"],
                  "properties": {
                    "_literal": { "const": true },
                    "_kind": { "const": "_hash" },
                    "_value": {
                      "type": "object",
                      "additionalProperties": { "$ref": "#/definitions/node" }
                    }
                  }
                },
                "array": {
                  "additionalProperties": false,
                  "required": ["_literal", "_value"],
                  "properties": {
                    "_literal": { "const": true },
                    "_kind": { "const": false },
                    "_value": {
                      "type": "array",
                      "items": { "$ref": "#/definitions/node" }
                    }
                  }
                },
                "assoc": {
                  "additionalProperties": false,
                  "required": ["_literal", "_value", "_kind"],
                  "properties": {
                    "_literal": { "const": true },
                    "_kind": { "const": "_assoc" },
                    "_value": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          { "type": "array",
                            "minItems": 2,
                            "maxItems": 2,
                            "items": { "$ref": "#/definitions/node" }
                          },
                          { "$ref": "#/definitions/node" }
                        ]
                      }
                    }
                  }
                },
                "exprkey": {
                  "additionalProperties": false,
                  "required": ["_literal", "_value", "_kind"],
                  "properties": {
                    "_literal": { "const": true },
                    "_kind": { "const": "_exprkey" },
                    "_value": {
                      "type": "object",
                      "additionalProperties": {
                        "additionalProperties": false,
                        "required": ["_exprkey", "_key", "_value"],
                        "properties": {
                          "_exprkey": { "const": true },
                          "_key": { "$ref": "#/definitions/expression" },
                          "_value": { "$ref": "#/definitions/expression" }
                        }
                      }
                    }
                  }
                }
              },
              "oneOf": [
                { "$ref": "#/definitions/literal/definitions/compound/definitions/basic/definitions/hash" },
                { "$ref": "#/definitions/literal/definitions/compound/definitions/basic/definitions/array" },
                { "$ref": "#/definitions/literal/definitions/compound/definitions/basic/definitions/assoc" },
                { "$ref": "#/definitions/literal/definitions/compound/definitions/basic/definitions/exprkey" }
              ]
            }
          },
          "additionalProperties": false,
          "required": ["_literal", "_value"],

          "properties": {
            "_literal": { "const": true },
            "_kind": { "enum": [
              false, "_deep_array",
              "_hash", "_deep_hash",
              "_exprkey", "_deep_exprkey",
              "_assoc", "_deep_assoc"
            ] },
            "_value": { "type": ["array", "object"] }
          },
          "oneOf": [
            { "$ref": "#/definitions/literal/definitions/compound/definitions/deep" },
            { "$ref": "#/definitions/literal/definitions/compound/definitions/basic" }
          ]
        }
      },

      "additionalProperties": false,
      "required": ["_literal", "_value"],

      "properties": {
        "_literal": { "const": true },
        "_value": { "type": [ "number", "string", "array", "object" ] },
        "_kind": {
          "type": ["boolean", "string"],
          "default": false,
          "enum": [
            false,
            "_symbol",
            "_regex",
            "_deep_array",
            "_hash", "_deep_hash",
            "_exprkey", "_deep_exprkey",
            "_assoc", "_deep_assoc"
          ]
        }
      },

      "oneOf": [
        { "$ref": "#/definitions/literal/definitions/number" },
        { "$ref": "#/definitions/literal/definitions/symbol" },
        { "$ref": "#/definitions/literal/definitions/string" },
        { "$ref": "#/definitions/literal/definitions/regex" },
        { "$ref": "#/definitions/literal/definitions/compound" }
      ]
    },

    "var_by_name": {
      "$comment": "a bare variable name; mainline Brat (LuaBrat) does not have the ability to use arbitrary expressions to compute bare names (that's what hashes and schema extensions are for)",

      "definitions": {
        "any_name": {
          "$comment": "perhaps this will be moved into a separate declaration if it is useful elsewhere than `member_access`",
          "type": "string", "pattern": "^[a-zA-Z0-9_!?\\-*+^&@~/\\><$%]+$"
        },
        "user_name": { "type": "string", "pattern": "^[a-zA-Z][a-zA-Z0-9_!?\\-*+^&@~/\\><$%]*$" },
        "var_or_bare_name": {
          "oneOf": [
            { "$ref": "#/definitions/var_by_name" },
            { "$ref": "#/definitions/var_by_name/definitions/user_name" }
          ]
        }
      },

      "type": "object",
      "required": ["_var_by_name", "_name"],
      "additionalProperties": false,
      "properties": {
        "_var_by_name": { "const": true },
        "_name": { "$ref": "#/definitions/var_by_name/definitions/user_name" }
      }
    },

    "member_access": {
      "$comment": "an expression of the form `a.b`, `<op>a`, `a<op>`, or `a <op> b` (the last 3 of which are equivalent to an `application` where `b.op` is the function to apply), where `a` is any object _target (including another _member_access), and `b` is a literal bare member name _member. this is also called a method call or method invocation. `({ object }()).true` works in LuaBrat with the enclosing parens. as far as i'm concerned, the name of the member cannot be the result of an arbitrary computed value in LuaBrat, and the target cannot be a function, but those are an extension.",

      "type": "object",
      "required": ["_member_access"],
      "additionalProperties": false,
      "properties": {
        "_member_access": { "const": true },
        "_target": { "$ref": "#/definitions/object_expression" },
        "_member": {
          "$comment": "pre-defined members that don't start with a letter, of pre-defined objects, may be accessed/assigned to (such as `number.* = 1`) but non-pre-existing ones may not be (as in `number.*newprop = 1`).",
          "oneOf": [
            { "$ref": "#/definitions/var_by_name" },
            { "$ref": "#/definitions/var_by_name/definitions/any_name" }
          ]
        }
      }
    },

    "assignment_target": {
      "$comment": "literally, what objects may appear on the LHS of an assignment operator (`=`). AFAIK this is only 1. variables 2, the result of any member access and 3. any indexing operation; the impression I get from the spec is that *not* any value can be assigned to; `[1] = 2` does not work in the reference impl. but `[1][0] = 2` works as expected.",

      "oneOf": [
        { "$ref": "#/definitions/var_by_name" },
        { "$ref": "#/definitions/index" },
        { "$ref": "#/definitions/member_access" }
      ]
    },

    "basic_object": {
      "$comment": "any basic object that isn't a comment or a function. specifically, it's either a literal, a simple variable name 'a', or a member access on a variable, like 'a.true?'. in the Lua reference implementation, a function is *not* an object that implements a 'call' method or something, they are completely distinct. making functions objects is out of scope for this schema, but is a good idea for a Brat extension. not to be confused with the normal JSON 'object', or the type named 'object' known to JSON schema",

      "oneOf": [
        { "$ref": "#/definitions/literal" },
        { "$ref": "#/definitions/assignment_target" }
      ]
    },

    "function": {
      "$comment": "the literal expression which creates a callable value. a function is an array of nodes, just like the top-level program schema, except the function has different scoping rules.",

      "type": "object",
      "required": ["_function"],
      "additionalProperties": false,

      "properties": {
        "_function": { "const": true },
        "_does": { "$ref": "#" },
        "_args": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "_required": {
              "$comment": "positional required argument list when calling the function. these names become in scope in the _does node-array, and get the values with which the function was invoked. for now, they can either be var_by_name objects or bare string names.",
              "type": "array",
              "items": { "oneOf": [
                  { "$ref": "#/definitions/var_by_name/definitions/var_or_bare_name" },
                  { "$ref": "#/definitions/comment" }
              ] }
            },
            "_default": {
              "$comment": "ordered associative array of names of default parameter names with their default values, which, as far as i'm concerned, can be any expression. allowing any node would allow comment nodes as default values, which would be a cool extension, but is not actually in the reference implementation",
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "oneOf": [
                    { "$ref": "#/definitions/var_by_name/definitions/var_or_bare_name" },
                    { "$ref": "#/definitions/expression" },
                    { "$ref": "#/definitions/comment" }
                  ]
                }
              }
            },
            "_extra": {
              "$comment": "the name of the *variable_length_args argument which collects all trailing function arguments after all required and default argument positions, into an array. calling this part 'var args' or 'array', 'slurpy' etc might get confusing",
              "$ref": "#/definitions/var_by_name"
            }
          }
        }
      }
    },

    "value_of": {
      "$comment": "the 'don't do that' builtin prefix operator, usually spelled `->`, also referred to as the 'value of' operator, but either _value_of or _dont_do_that are allowed.",

      "definitions": {
        "value_of": {
          "type": "object",
          "required": ["_value_of"],
          "properties": {
            "_value_of": { "const": true }
          }
        },
        "dont_do_that": {
          "type": "object",
          "required": ["_dont_do_that"],
          "properties": {
            "_dont_do_that": { "const": true }
          }
        }
      },

      "additionalProperties": false,
      "required": ["_target"],
      "properties": {
        "_dont_do_that": true,
        "_value_of": true,
        "_target": { "$ref": "#/definitions/expression" }
      },

      "oneOf": [
        { "$ref": "#/definitions/value_of/definitions/value_of" },
        { "$ref": "#/definitions/value_of/definitions/dont_do_that"}
      ]
    },

    "assignment": {
      "$comment": "the assignment builtin operator. the LHS has to be something that can be assigned to, and the RHS can be any value, including another assignment. _target and _source used to be called _lhs and _rhs, respectively, as in the = operator, but i hoped target/source is more consistent (see member_access) and self-explanatory",

      "type": "object",
      "additionalProperties": false,
      "required": ["_assignment", "_target", "_source"],
      "properties": {
        "_assignment": { "const": true },
        "_target": { "$ref": "#/definitions/assignment_target" },
        "_source": { "$ref": "#/definitions/expression" }
      }
    },

    "application": {
      "$comment": "any expression of the form a(b, c, d: x), where a is something to invoke with the arguments, and d will be a key in a hash of 'keyword'-like arguments that will be given as the last formal parameter. note that a.b is a `member_access`, but a.b(c) is an `application` of the `member_access` `a.b` to the `_positional_args` c.",
      "type": "object",
      "required": ["_application", "_target"],
      "additionalProperties": false,
      "properties": {
        "_application": { "const": true },
        "_target": { "$ref": "#/definitions/expression" },
        "_positional_args": {
          "type": "array",
          "items": { "$ref": "#/definitions/expression" },
          "default": []
        },
        "_hash_args": {
          "type": "object",
          "additionalProperties": { "$ref": "#/definitions/expression" }
        }
      }
    },

    "index": {
      "$comment": "index access on an array or hash value, like `x[y]` or `[1][0]` or `[a: 1][:a]` or `[...][a, b, c]`. x[] as an empty index / slice, is an unimplemented extension.",
      "type": "object",
      "additionalProperties": false,
      "required": ["_index"],
      "properties": {
        "_index": { "const": true },
        "_target": { "$ref": "#/definitions/expression" },
        "_indices": {
          "type": "array",
          "minItems": 1,
          "items": { "$ref": "#/definitions/node" }
        }
      }
    },

    "object_expression": {
      "$comment": "any expresison that could yield an object, this is essentially all previous declarations except function and value_of which are included in expression",

      "oneOf": [
        { "$ref": "#/definitions/basic_object" },
        { "$ref": "#/definitions/application" },
        { "$ref": "#/definitions/assignment" }
      ]
    },

    "expression": {
      "$comment": "TODO: complement with some kind of wrapper parent node for (paren expressions) and/or the comma `,` 'operator'",
      "not": { "$ref": "#/definitions/comment" },
      "oneOf": [
        { "$ref": "#/definitions/function" },
        { "$ref": "#/definitions/value_of" },
        { "$ref": "#/definitions/object_expression" }
      ]
    },

    "node": {
      "oneOf": [
        { "$ref": "#/definitions/comment" },
        { "$ref": "#/definitions/expression" }
      ]
    }
  },

  "type": "array",
  "items": { "$ref": "#/definitions/node" },
  "default": []
}
